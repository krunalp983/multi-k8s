image: docker:git

services:
  - docker:dind

stages:
  - build
  - test
  - deploy

variables: 
# we store SHA git variable 
# cloud sdk define gooole cloud variable it makes sure that ggogle
  - SHA: "$(git rev-parse HEAD)"
  - CLOUDSDK_CORE_DISABLE_PROMPTS: "1"


build:
  stage: build
  script:
# below command open ssh 
    - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d
# download sdk and install locally with travis ci
    - curl https://sdk.cloud.google.com | bash > /dev/null;
# SOURECE will LOOK FOR THE DEFAULT DIRCTORY (IT WILL SETUP GOOGLE LOCALLY ON YOUR MACHINE FOR YOU)
    - source $HOME/google-cloud-sdk/path.bash.inc
# install kubectl on local environment 
    - gcloud components update kubectl
# we create the file call service account.json will like IAM user which will provide authentication to use in out pipeline
    - gcloud auth activate-service-account --key-file service-account.json
# below  command describe om which project which we are working on which we select when we open google cloud 
# we will find project id in the same line as project name describe for example in our case steady-petal-307322 
    - gcloud config set project steady-petal-307322
    - gcloud config set compute/zone us-central1-c
# we also want to describe whivh clustre we want to use.we can fine this in kubernetes engine therewe can see loaction and which cluster is enable 
    - gcloud container clusters get-credentials multi-cluster
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
# check file exexute sueccsfuly alomg with this we discribe the directory
    - docker build -t stephengrider/react-test -f ./client/Dockerfile.dev ./client
# script for testing project 
test:
  stage: test
  script:
    - docker run -e CI=true stephengrider/react-test npm test
# below is script which we describe in will cretate images and push it to docker hub we told travis just ru this file for deployment which we store in deploy.sh
deploy:
  stage: deploy
  script: 
    - bash deploy.sh
  only:
    - main

